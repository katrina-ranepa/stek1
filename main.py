def is_balanced(s):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ —Å–∫–æ–±–∫–∞–º.

    Args:
        s: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∫–æ–±–∫–∏.

    Returns:
        True, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞, –∏–Ω–∞—á–µ False.
    """
    stack = []
    opening_brackets = "({["
    closing_brackets = ")}]"
    bracket_map = {")": "(", "}": "{", "]": "["}

    for char in s:
        if char in opening_brackets:
            stack.append(
                char
            )  # –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª - –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞, —Ç–æ –∫–ª–∞–¥—ë–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –≤ —Å—Ç–µ–∫
        elif char in closing_brackets:
            if not stack:  # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç
                return False  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –±–µ–∑ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π
            top = stack.pop()  # –î–æ—Å—Ç–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            if bracket_map[char] != top:
                return False  # –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∫–æ–±–æ–∫

    return not stack  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞, –µ—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç


def test_balanced_strings():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ is_balanced —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏"""

    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å–∫–æ–±–æ–∫...")

    # –¢–µ—Å—Ç 1: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    print("\n‚úÖ –¢–µ—Å—Ç 1: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
    assert is_balanced("()") == True
    assert is_balanced("()[]{}") == True
    assert is_balanced("{[]}") == True
    assert is_balanced("") == True
    assert is_balanced("abc") == True  # –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫–æ–±–æ–∫, —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    assert is_balanced("({[()]})") == True

    print("   –í—Å–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ‚úì")

    # –¢–µ—Å—Ç 2: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    print("\n‚ùå –¢–µ—Å—Ç 2: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
    assert is_balanced("(]") == False
    assert is_balanced("([)]") == False
    assert is_balanced(")") == False
    assert is_balanced("(") == False
    assert is_balanced("((]") == False
    assert is_balanced("((())") == False
    assert is_balanced("))((") == False
    assert is_balanced("({[()]") == False
    assert is_balanced("((())}}") == False

    print("   –í—Å–µ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ‚úì")

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ")


def run_examples():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("\n" + "=" * 50)
    print("üìö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –§–£–ù–ö–¶–ò–ò")
    print("=" * 50)

    examples = [
        "()",
        "()[]{}",
        "{[]}",
        "(]",
        "([)]",
        "",
        "abc",
        "({[()]})",
        "((())",
        "({[()]",
    ]

    for example in examples:
        result = is_balanced(example)
        status = "‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ" if result else "‚ùå –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ"
        print(f"'{example}' -> {status}")


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_balanced_strings()

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        run_examples()

        print("\n" + "üéä –í–°–ï –ü–†–û–í–ï–†–ö–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û! üéä")

    except AssertionError as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
    except Exception as e:
        print(f"\n‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
